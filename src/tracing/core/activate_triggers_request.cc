/*
 * Copyright (C) 2017 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*******************************************************************************
 * AUTOGENERATED - DO NOT EDIT
 *******************************************************************************
 * This file has been generated from the protobuf message
 * perfetto/common/activate_triggers_request.proto
 * by
 * ../../tools/proto_to_cpp/proto_to_cpp.cc.
 * If you need to make changes here, change the .proto file and then run
 * ./tools/gen_tracing_cpp_headers_from_protos
 */

#include "perfetto/tracing/core/activate_triggers_request.h"

#include "perfetto/common/activate_triggers_request.pb.h"

namespace perfetto {

ActivateTriggersRequest::ActivateTriggersRequest() = default;
ActivateTriggersRequest::~ActivateTriggersRequest() = default;
ActivateTriggersRequest::ActivateTriggersRequest(
    const ActivateTriggersRequest&) = default;
ActivateTriggersRequest& ActivateTriggersRequest::operator=(
    const ActivateTriggersRequest&) = default;
ActivateTriggersRequest::ActivateTriggersRequest(
    ActivateTriggersRequest&&) noexcept = default;
ActivateTriggersRequest& ActivateTriggersRequest::operator=(
    ActivateTriggersRequest&&) = default;

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wfloat-equal"
bool ActivateTriggersRequest::operator==(
    const ActivateTriggersRequest& other) const {
  return (trigger_names_ == other.trigger_names_);
}
#pragma GCC diagnostic pop

void ActivateTriggersRequest::FromProto(
    const perfetto::protos::ActivateTriggersRequest& proto) {
  trigger_names_.clear();
  for (const auto& field : proto.trigger_names()) {
    trigger_names_.emplace_back();
    static_assert(
        sizeof(trigger_names_.back()) == sizeof(proto.trigger_names(0)),
        "size mismatch");
    trigger_names_.back() =
        static_cast<decltype(trigger_names_)::value_type>(field);
  }
  unknown_fields_ = proto.unknown_fields();
}

void ActivateTriggersRequest::ToProto(
    perfetto::protos::ActivateTriggersRequest* proto) const {
  proto->Clear();

  for (const auto& it : trigger_names_) {
    proto->add_trigger_names(
        static_cast<decltype(proto->trigger_names(0))>(it));
    static_assert(sizeof(it) == sizeof(proto->trigger_names(0)),
                  "size mismatch");
  }
  *(proto->mutable_unknown_fields()) = unknown_fields_;
}

}  // namespace perfetto
